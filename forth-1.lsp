;;
;;  ЛШЮП-2024
;;  Простой Форт
;;  
;;  авт:  Байков А и Фомин А
;;
(defun forth NIL 
   (SETQ STACK NIL)
   (LET ((VYXOD NIL)
         (DICT NIL)
         (STUK NIL)
         (ZPT T)
         (SIKL NIL)
         (REED NIL)
         (IF1 NIL))
     (LOOP 
         (SETQ REED (READ T))
         (LET ((CMD (REPLACE (STRWORDS REED) DICT)))
           ;;(PRINTLINE CMD) 
           (ITER (FOR TXT IN CMD)
              (COND ((EQ TXT "quit")
                         ;;(RAISEERROR "gydbai") (SETQ VYXOD T)) ;; !!!
                         (setq vyxod t))
                    ((EQ TXT "out") 
                         (PRINTLINE STACK))
                    ((EQ TXT ":") 
                         (SETQ ZPT NIL)
                         (PUSH (POP STACK) STUK))
                    ((EQ TXT ";") 
                         (SETQ ZPT T) 
                         (SETQ DICT (SLOVAR (REVERSE STUK) DICT))) 
                    ((NULL ZPT) 
                         (PUSH TXT STUK))
                    ((EQ TXT "do") 
                         (SETQ SIKL 1)) 
                    ((EQ TXT "loop")
                         (COND ((= SIKL 1)
                            (SETQ SIKL NIL) 
                            (ITER (FOR I FROM (POP STACK) TO (- (POP STACK) 1))
                                  (PRINTLINE I)))))
                    ((EQ TXT "if")
                         (IF (= (POP STACK) 0) (PRINT "f") (PRINT "t")))
                    ((EQ TXT "=") 
                         (IF (= (POP STACK) (POP STACK)) (PUSH 1 STACK) (PUSH 0 STACK)))
                    ((EQ TXT ">")
                         (IF (> (POP STACK) (POP STACK)) (PUSH 0 STACK) (PUSH 1 STACK)))
                    ((EQ TXT "<") 
                         (IF (< (POP STACK) (POP STACK)) (PUSH 0 STACK) (PUSH 1 STACK)))
                    ((EQ TXT "+") 
                         (PUSH (+ (POP STACK) (POP STACK)) STACK))
                    ((EQ TXT "*")
                         (PUSH (* (POP STACK) (POP STACK)) STACK))
                    ((EQ TXT "-") 
                         (PUSH (- 0 (- (POP STACK) (POP STACK)) STACK)))
                    ((EQ TXT "/") 
                         (PUSH (/ 1 (/ (POP STACK) (POP STACK)) STACK)))
                    ((EQ TXT "!") 
                         (PUSH (FACT (POP STACK)) STACK))
                    ((EQ TXT ".") 
                         (PRINTLINE (POP STACK)))
                    ((EQ TXT "FileSave") 
                         ((FILOPEN 'DICTAT "dictat.txt" 1) 
                         (FILPUTLINE 'DICTAT (OUTPUT DICT))
                         (FILCLOSE 'DICTAT)))
                    ((EQ TXT "FileLoad") 
                         ((FILOPEN 'DICTUT "dictat.txt" 0)
                         (SETQ DICT (FILGETLINE (QUOTE DICTUT))) 
                         (FILCLOSE (QUOTE DICTUT))))
                    ((EQ TXT "over")
                         (PUSH (INPUT (CADR STACK)) (INPUT STACK)))
                    ((EQ TXT "drop") 
                         (POP STACK))
                    ((EQ TXT "SaveStack") ;; ?????
                         (SETQ GLOBALST STACK))
                    ((EQ TXT "LoadStack") ;; ?????
                         (SETQ STACK GLOBALST))
                    ((EQ TXT "dup")
                         (PUSH (CAR STACK) STACK))
                    ((EQ TXT "var") 
                         (VARLIST)) 
                    ((EQ TXT "forget") ;; ?????
                         (POP STACK))
                    ((EQ TXT "swap") 
                         (LET ((U (POP STACK))
                               (K (POP STACK)))
                             (PUSH U STACK)
                             (PUSH K STACK)))
                    ((EQ TXT "rot")
                         (LET ((M (POP STACK))
                               (E (POP STACK))
                               (H (POP STACK)))
                            (PUSH M STACK)
                            (PUSH H STACK)
                            (PUSH E STACK)))
                    ((LISTP TXT)
                         (ESLISPISOK TXT NIL)) ;; ?????
                    (T 
                            (PUSH (INPUT TXT) STACK))))
           (UNLESS (NULL VYXOD) (printsline "Good bye!") (RETURN t))))))
;;
(defun REPLACE (LST DICT) 
     (LET ((RES NIL))
        (ITER (FOR W IN LST)
            (LET ((A (ITER (FOR PAIR IN DICT) 
                       (WHEN (EQ W (CAR PAIR)) (RETURN (CDR PAIR))))))
                 (IF A (COLLECTING A INTO RES) (COLLECTING W INTO RES)))) RES))
;;
(defun SLOVAR (STUK DICT)
   (APPEND (LIST (CONS (CADR STUK) (LIST (CDDR STUK)))) DICT))
;;
(defun ESLISPISOK (TXT C)
   (SETQ STACK (APPEND (REVERSE (ITER (FOR I IN (CAR TXT)) (PUSH (INPUT I) C))) STACK)))
;;
(defun err NIL NIL) ;;
