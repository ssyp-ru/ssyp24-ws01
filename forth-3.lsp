;;
;; ЛШЮП-2024
;; авт: Сидоров Д.
;;

(defun forth NIL 
   (LET ((STACK NIL)
         (DICT NIL)
         (END "The End")
         (STOPPING 1))
     (LOOP 
         (LET* ((TXT (STRWORDS (READ T)))
                (LST NIL))
          (LOOP 
               (SETQ LST (FORTH-MAIN STACK DICT TXT))
               (SETQ STACK (CAR LST))
               (SETQ DICT (CAR (CDR LST)))
               (SETQ TXT (CAR (CDR (CDR LST))))
               (SETQ STOPPING (CAR (CDR (CDR (CDR LST)))))
               (SETQ TXT (CDR TXT))
               (WHEN (NULL TXT) (RETURN 0))) 
               (WHEN (EQ STOPPING 0) (RETURN NIL))))
           END))
         
;;
(defun forth-main (STACK DICT TXT)
    (LET* ((RESULT NIL)
           (COP 0)
           (DICT-IF-LEN 0)
           (DELIM 0)
           (DELIT 0)
           (DOP 0)
           (STOPPING 1)
           (STRCOPY NIL)
           (NAME 0)
           (PICKING NIL)
           (IFING 0)
           (ROTTER 0)
           (TRUE-CHECK 0)
           (TRUE NIL)
           (FALSE NIL))
   (COND 
		
		((eq (car txt) "dict") 
		(if (null dict) (printline "Словарь пуст") 
		(printline dict)))
		((EQ (CAR TXT) "!clear")
               (IF (NULL STACK) (PRINTLINE "Стек уже пуст") (SETQ STACK NIL)))
         ((EQ (CAR TXT) "!out") 
               (IF (NULL STACK) (PRINTLINE "Стек пуст") (PRINTLINE STACK)))
         ((EQ (CAR TXT) "quit") 
               (PRINT "Bye!")
               (SETQ STOPPING 0))
         ((EQ (CAR TXT) "dup")
               (IF (NULL STACK) (PRINTLINE "Невозможно дублировать") (PUSH (CAR STACK) STACK)))
         ((EQ (CAR TXT) "drop")
               (IF (NULL STACK) (PRINTLINE "Стек уже пуст") (POP STACK)))
         ((EQ (CAR TXT) "over") 
               (IF (NULL (CDR STACK))
                   (PRINTLINE "Невозможно выполнить команду over - стек недостаточно полон")
                   (PUSH (CAR (CDR STACK)) STACK)))
         ((EQ (CAR TXT) "swap") 
               (IF (NULL (CDR STACK)) 
                   (PRINTLINE "Невозможно выполнить команду swap - стек недостаточно полон")
                   (PROGN
                     (ITER (FOR Q FROM 1 TO 2) 
                        (PUSH (CAR STACK) PICKING)
                        (POP STACK))
                        (PUSH (CAR (CDR PICKING)) STACK)
                        (PUSH (CAR PICKING) STACK)
                        (SETQ PICKING NIL))))
         ((EQ (CAR TXT) "rot")
                (IF (NULL (CDR STACK))
                    (WHEN (NULL STACK) (PRINTLINE "Невозможно выполнить команду rot - стек недостаточно полон"))
                    (PROGN 
                        (SETQ STACK (REVERS STACK))
                        (SETQ ROTTER (CAR STACK))
                        (SETQ STACK (CDR STACK))
                        (SETQ STACK (REVERS STACK))
                        (PUSH ROTTER STACK))))
         ((EQ (CAR TXT) "forget")
               (IF (OR (NULL (CDR TXT)) 
                       (DICT-CHECK DICT (CAR (CDR TXT))))
                   (PRINTLINE "Невозможно выполнить forget") 
                   (PROGN 
                      (SETQ DICT (DICT-REMOVE DICT (CAR (CDR TXT))))
                      (SETQ TXT (CDR TXT)))))
         ((EQ (CAR TXT) "if") 
               (SETQ TRUE NIL) 
               (SETQ TXT (CDR TXT))
               (LOOP 
                     (WHEN (EQ (CAR TXT) "end") 
                        (PROGN 
                           (SETQ TXT (CDR TXT))
                           (IF (EQ (CAR STACK) "0") 
                               (ITER (FOR Q IN FALSE)
                                 (PUSH Q TXT))
                               (ITER (FOR Q IN TRUE) 
                                 (PUSH Q TXT)))
                           (RETURN 0)))
                           
                     (WHEN (NULL TXT)
                       (PROGN 
                               (PRINTLINE "Нет окончания if - end")
                               (RETURN 0)))

                     (WHEN (EQ (CAR TXT) "else")
                       (SETQ TRUE-CHECK (- TRUE-CHECK 1))
                       (SETQ TXT (CDR TXT)))

                     (WHEN (EQ (CAR TXT) "if") 
                       (PRINTLINE "Программа не поддерживает 2 if"))
                       
                     (WHEN (> TRUE-CHECK (- (LISTLEN STACK) 1)) 
                       (PROGN 
                            (PRINTLINE "Невозможно проверить истинность - стек слишком мал")
                            (SETQ TXT NIL)
                            (RETURN 0)))
                     (COND ((< TRUE-CHECK -1) 
                              (PRINTLINE "Невозможно выполнить if - слишком много else")
                              (SETQ TXT NIL) 
                              (RETURN 0))
                            ((= TRUE-CHECK 0) 
                              (PUSH (CAR TXT) TRUE)
                              (SETQ TXT (CDR TXT)))
                            ((= TRUE-CHECK -1) 
                              (PUSH (CAR TXT) FALSE)
                              (SETQ TXT (CDR TXT)))))
               (PUSH 0 TXT))
               
          ((EQ (CAR TXT) "!")
              (IF (OR (EQ (CAR STACK) NIL) (NOT (NUMBERP (INPUT (CAR STACK))))) 
                  (PRINTLINE "Невозможно найти факториал нечислового элемента")
                  (PROGN
                      (SETQ DOP (OUTPUT (FUCT (INPUT (CAR STACK)))))
                      (POP STACK) 
                      (PUSH DOP STACK))))
         ((EQ (CAR TXT) "+") 
              (IF (OR (EQ (CAR STACK) NIL) 
                      (NOT (NUMBERP (INPUT (CAR STACK))))
                      (EQ (CAR (CDR STACK)) NIL)
                      (NOT (NUMBERP (INPUT (CAR (CDR STACK))))))
                      (PRINTLINE "Невозможно выполнить операцию '+' с нечисловыми слагаемыми")
                  (PROGN 
                      (PUSH (OUTPUT (+ (INPUT (POP STACK)) (INPUT (POP STACK)))) STACK))))
         ((EQ (CAR TXT) "*") 
              (IF (OR 
                     (EQ (CAR STACK) NIL) 
                     (EQ (CAR (CDR STACK)) NIL)
                     (NOT (NUMBERP (INPUT (CAR STACK))))
                     (NOT (NUMBERP (INPUT (CAR (CDR STACK))))))
                     (PRINTLINE "Невозможно выполнить операцию '*' с нечисловыми множителями")
                     (PUSH (OUTPUT (* (INPUT (POP STACK)) (INPUT (POP STACK)))) STACK)))
         ((EQ (CAR TXT) "-")
              (IF (OR
                     (EQ (CAR STACK) NIL)
                     (EQ (CAR (CDR STACK)) NIL)
                     (NOT (NUMBERP (INPUT (CAR STACK))))
                     (NOT (NUMBERP (INPUT (CAR (CDR STACK))))))
                     (PRINTLINE "Невозможно выполнить операцию '-' с нечисловыми элементами")
                     (PROGN (PUSH (OUTPUT (* -1 (- (INPUT (POP STACK)) (INPUT (POP STACK))))) STACK))))
         ((EQ (CAR TXT) "/") 
              (IF (OR
                      (NOT (NUMBERP (INPUT (CAR STACK))))
                      (NOT (NUMBERP (INPUT (CAR (CDR STACK))))))
                      (PRINTLINE "Невозможно выполнить операцию '/' с текущим стеком")
                      (PROGN 
                             (SETQ DELIT (INPUT (POP STACK)))
                             (SETQ DELIM (INPUT (POP STACK)))
                             (PUSH (OUTPUT (/ DELIM DELIT)) STACK))))
         ((EQ (CAR TXT) "\") 
              (IF (OR 
                      (NOT (NUMBERP (INPUT (CAR STACK)))) 
                      (NOT (NUMBERP (INPUT (CAR (CDR STACK))))))
                      (PRINTLINE "Невозможно выполнить операцию '\' с текущим стеком")
                      (PROGN 
                             (SETQ DELIT (INPUT (POP STACK)))
                             (SETQ DELIM (INPUT (POP STACK)))
                             (PUSH (OUTPUT (\ DELIM DELIT)) STACK))))
         ((EQ (CAR TXT) "%") 
              (SETQ DELIM 0)
              (SETQ DELIT 0)
              (PRINTLINE 1)
              (IF (OR 
                     (NOT (NUMBERP (INPUT (CAR STACK))))
                     (NOT (NUMBERP (INPUT (CAR (CDR STACK))))))
                  (PRINTLINE "Невозможно найти остаток от деления с текущим стеком")
                  (PROGN 
                     (SETQ DELIT (INPUT (POP STACK)))
                     (SETQ DELIM (INPUT (POP STACK)))
                     (COND ((> DELIT DELIM) (PUSH (OUTPUT DELIT) STACK))
                           ((= DELIT DELIM) (PUSH "0" STACK))
                           (T (PUSH (OUTPUT (% DELIM DELIT)) STACK)))))
                           (SETQ DELIM 0) 
                           (SETQ DELIT 0))
         ((EQ (CAR TXT) "^") 
              (SETQ DELIM 0)
              (SETQ DELIT 0)
              (IF (OR 
                     (NOT (NUMBERP (INPUT (CAR STACK))))
                     (NOT (NUMBERP (INPUT (CAR (CDR STACK))))))
                 (PRINTLINE "Невозможно выполнить операцию '^' с текущим стеком")
                 (PROGN 
                     (SETQ DELIT (INPUT (POP STACK)))
                     (SETQ DELIM (INPUT (POP STACK)))
                     (PUSH (OUTPUT (^ DELIM DELIT)) STACK)))
             (SETQ DELIT 0)
             (SETQ DELIM 0))

         ((EQ (CAR TXT) "=") 
             (IF (NULL (CDR STACK)) 
                 (PRINTLINE "Невозможно провести сравнение")
                 (IF (EQ (CAR STACK) (CAR (CDR STACK))) (progn (pop stack) (pop stack) (PUSH "-1" STACK)) (progn (pop stack) (pop stack) (PUSH "0" STACK))) ))
         ((EQ (CAR TXT) ">") 
             (IF (OR 
                    (NULL (CDR STACK))
                    (EQ (CAR STACK) NIL)
                    (EQ (CAR (CDR STACK)) NIL)
                    (NOT (NUMBERP (INPUT (CAR STACK))))
                    (NOT (NUMBERP (INPUT (CAR (CDR STACK))))))
                                    (PRINTLINE "Невозможно провести сравнение")
                           (IF (> (INPUT (CAR (CDR STACK))) (INPUT (CAR STACK)))
                     (progn (pop stack) (pop stack) (PUSH "-1" STACK)) (progn (pop stack) (pop stack) (PUSH "0" STACK))) ))
         ((EQ (CAR TXT) "<") 
             (IF (OR 
                    (NULL (CDR STACK))
                    (EQ (CAR STACK) NIL)
                    (EQ (CAR (CDR STACK)) NIL)
                    (NOT (NUMBERP (INPUT (CAR STACK))))
                    (NOT (NUMBERP (INPUT (CAR (CDR STACK))))))
                                    (PRINTLINE "Невозможно провести сравнение")
                           (IF (< (INPUT (CAR (CDR STACK))) (INPUT (CAR STACK)))
                (progn (pop stack) (pop stack) (PUSH "-1" STACK)) (progn (pop stack) (pop stack) (PUSH "0" STACK))) ))
         ((EQ (CAR TXT) "<=")
               (IF (OR 
                       (NULL (CDR STACK))
                       (EQ (CAR STACK) NIL)
                       (EQ (CAR (CDR STACK)) NIL)
                       (NOT (NUMBERP (INPUT (CAR STACK))))
                       (NOT (NUMBERP (INPUT (CAR (CDR STACK))))))
                                    (PRINTLINE "Невозможно провести сравнение")
                                     (IF (> (INPUT (CAR (CDR STACK))) (INPUT (CAR STACK)))  (progn (pop stack) (pop stack) (PUSH "-1" STACK)) (progn (pop stack) (pop stack) (PUSH "0" STACK))) ))
         ((EQ (CAR TXT) ">=") 
                (IF (OR 
                       (NULL (CDR STACK))
                       (EQ (CAR STACK) NIL)
                       (EQ (CAR (CDR STACK)) NIL)
                       (NOT (NUMBERP (INPUT (CAR STACK))))
                       (NOT (NUMBERP (INPUT (CAR (CDR STACK))))))
                                   (PRINTLINE "Невозможно провести сравнение")
								   
                 (IF (< (INPUT (CAR (CDR STACK))) (INPUT (CAR STACK)))  (progn (pop stack) (pop stack) (PUSH "-1" STACK)) (progn (pop stack) (pop stack) (PUSH "0" STACK))) ))
         ((EQ (CAR TXT) ".") 
              (IF (NULL STACK) (PRINTLINE "Стек пуст") (PRINTLINE (POP STACK)))) 
         ((EQ (CAR TXT) ",") 
              (IF (NULL STACK) (PRINTLINE "Стек пуст") (PRINTLINE (CAR STACK))))
         ((EQ (CAR TXT) ":") 
              (SETQ TXT (CDR TXT))
              (LOOP (WHEN (NULL TXT) 
                      (PROGN 
                            (PRINTLINE "Не задано значение после :")
                            (RETURN 0)))
                    (WHEN (EQ NAME 0) 
                      (PROGN 
                            (SETQ NAME (CAR TXT))
                            (SETQ TXT (CDR TXT))))
                    (WHEN (EQ (CAR TXT) ";")
                      (PROGN 
                          (REVERSE STRCOPY) 
                          (PUSH NAME STRCOPY)
                          (SETQ DICT (DICT-READ DICT STRCOPY))
                          (RETURN 0)))
                    (PUSH (CAR TXT) STRCOPY)
                    (SETQ TXT (CDR TXT))))
         ((EQ (CAR (CDR TXT)) "pick")
              (IF (OR 
                     (NULL STACK) 
                     (< (INPUT (CAR TXT)) 0) 
                     (> (INPUT (CAR TXT)) (- (LISTLEN STACK) 1)))
                (PRINTLINE "Невозможно выполнить pick") 
                (PROGN 
                   (PUSH (NTH (INPUT (CAR TXT)) STACK) STACK)
                   (SETQ TXT (CDR TXT)))))
         (T (IF (DICT-CHECK DICT (CAR TXT))
                (WHEN (NUMBERP (INPUT (CAR TXT))) 
                   (PUSH (CAR TXT) STACK))
                   (PROGN 
                         (SETQ NAME (CAR TXT))
                         (SETQ TXT (CDR TXT))
                         (SETQ STRCOPY (DICT-OUT DICT NAME))
                         (ITER (FOR Q IN STRCOPY) (PUSH Q TXT))
                         (PUSH 0 TXT))))
      ) 
      (PUSH STOPPING RESULT)
      (PUSH TXT RESULT)
      (PUSH DICT RESULT)
      (PUSH STACK RESULT) RESULT))
;;
(defun REVERS  (X) 
   (LET ((LST NIL))
       (ITER (FOR Q IN X) (PUSH Q LST)) LST))
;;
(defun DICT-CHECK (DICT STR) 
   (LET ((CHECK 0)) 
       (ITER (FOR Q IN DICT)
             (WHEN (EQ (CAR Q) STR) (SETQ CHECK 1)))
       (IF (= CHECK 1) NIL T)))
;;
(defun DICT-REMOVE (LST STR) 
    (LET ((HEAD NIL)) 
       (COND ((EQ (CAR (CAR LST)) STR) 
                 (SETQ HEAD (CDR LST)) HEAD)
             (T (LOOP (UNLESS (EQ (CAR (CAR LST)) STR)
                         (PUSH (CAR LST) HEAD))
                         (SETQ LST (CDR LST)) 
                         (WHEN (NULL LST) 
                             (RETURN HEAD))))) HEAD))
;;
(defun LISTLEN (X)
   (LET ((LST 0))
     (ITER (FOR Q IN X) (SETQ LST (+ LST 1))) LST))
;;
(defun FUCT (X) 
    (LET ((RES 1))
        (ITER (FOR Q FROM 1 TO X) (SETQ RES (* RES Q))) RES)) 
;;
(defun DICT-READ (DICT IN-D) 
   (COND ((NULL DICT) (SETQ DICT (LIST IN-D)))
         (T (IF (EQ (DICT-CHECK DICT (CAR IN-D)) T)
             (PUSH IN-D DICT)
             (PROGN 
                (SETQ DICT (DICT-REMOVE DICT (CAR IN-D)))
                (PUSH IN-D DICT))))) DICT)
;;
(defun DICT-OUT (DICT STR) 
   (LET ((RETURNING NIL))
     (ITER (FOR Q IN DICT)
       (WHEN (EQ (CAR Q) STR)
          (PROGN 
                (SETQ RETURNING (CDR Q))
                (RETURN 0)))) RETURNING))
;;
;;
(defun STR-LIST (LIST-STR STR) 
    (LET ((C 0)) 
       (ITER (FOR Q IN LIST-STR)
          (WHEN (EQ Q STR) (SETQ C 1)))
       (IF (= C 0) NIL T)))
;;
(defun LIST-CUT (X) (CDR X))
;;
(defun forth-fun (X) (LET ((STACK NIL)) (STRWORDS X)))
;;
(defun proverka (X) (WHEN (EQ (NULL X) NIL) (PRINTLINE T)) NIL)
;;
(defun dict-in (DICT IN-D) 
    (COND ((NULL DICT) (SETQ DICT (LIST IN-D)))
          (T (IF (EQ (DICT-CHECK DICT (CAR IN-D)) T)
                (PUSH IN-D DICT)
                (PROGN 
                    (DICT-REMOVE DICT IN-D)
                    (PUSH IN-D DICT))))) DICT)
;;
(defun cdrr (LST NUMB) 
     (LET ((RES LST))
        (IF (> NUMB (- (LISTLEN LST) 1))
            (SETQ RES NIL)
            (ITER (FOR Q FROM 1 TO NUMB) (SETQ RES (CDR RES)))) RES))
;;
(defun schet (&OPTIONAL C) 
      (IF (EQ C 1) (SETQ D 0) (SETQ D (+ D 1))) (OUTPUT D))
